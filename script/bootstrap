#!/bin/sh
#
# MIT License
#
# Copyright (c) 2018 8devices
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

set -e

TMP_BUILD_DIR="$(mktemp -d)"
PROJECT_ROOT_DIR="$(cd $(dirname "$0")/.. && pwd -P)"

WAKAAMA_SUBMODULE_DIR="${PROJECT_ROOT_DIR}/third_party/wakaama"

update_repositories () {
    if which apt-get; then
        sudo apt-get update -qq
    elif which rpm; then
        echo "RPM is not supported yet!"
        return 1
    elif which opkg; then
        echo "OPKG is not supported yet!"
        return 1
    elif which brew; then
        echo "BREW is not supported yet!"
        return 1
    else
        echo "Unknown package manager! (not supported yet)"
        return 1
    fi

    return 0
}

update_submodules () {
    git submodule update --recursive --remote
}

install_wakaama () {
    eval "${WAKAAMA_SUBMODULE_DIR}/script/setup"
    eval "cd ${WAKAAMA_SUBMODULE_DIR}/build"
    sudo make install
    cd -
}

install_submodules () {
    install_wakaama
}

install_build_tools () {
    if which apt-get; then
        sudo apt-get install -yqq git cmake build-essential automake libtool
    elif which rpm; then
        echo "RPM is not supported yet!"
        return 1
    elif which opkg; then
        echo "OPKG is not supported yet!"
        return 1
    elif which brew; then
        echo "BREW is not supported yet!"
        return 1
    else
        echo "Unknown package manager! (not supported yet)"
        return 1
    fi

    return $?
}

install_dependencies () {
    if which apt-get; then
        sudo apt-get install -yqq libmicrohttpd-dev libjansson-dev libcurl4-gnutls-dev libssl-dev
    elif which rpm; then
        echo "RPM is not supported yet!"
        return 1
    elif which opkg; then
        echo "OPKG is not supported yet!"
        return 1
    elif which brew; then
        echo "BREW is not supported yet!"
        return 1
    else
        echo "Unknown package manager! (not supported yet)"
        return 1
    fi

    return $?
}

install_libjwt () {
    LIBJWT_DIR="${TMP_BUILD_DIR}/libjwt"
    git clone --quiet -b v1.9.0 --recursive --single-branch https://github.com/benmcollins/libjwt ${LIBJWT_DIR}
    if ! [ $? -eq 0 ]; then
        echo "Failed to obtain libjwt!"
        eval "rm -rf ${TMP_BUILD_DIR}"
        return 1
    fi

    eval "cd ${LIBJWT_DIR}"

    autoreconf -i
    eval "${LIBJWT_DIR}/configure"
    make
    sudo make install
    if ! [ $? -eq 0 ]; then
        echo "Failed to install JWT library!"
        cd -
        eval "rm -rf ${TMP_BUILD_DIR}"
        return 1
    fi

    status_code=$?

    cd -
    eval "rm -rf ${LIBJWT_DIR}"

    return ${status_code}
}

install_ulfius_orcania_yder () {
    ULFIUS_DIR="${TMP_BUILD_DIR}/ulfius"
    git clone --quiet -b v2.3.2 --recursive --single-branch https://github.com/babelouest/ulfius.git "${ULFIUS_DIR}"

    if ! [ $? -eq 0 ]; then
        echo "Failed to obtain ulfius and submodules!"
        return 1
    fi

    eval "cd ${ULFIUS_DIR}/lib/orcania"
    make
    sudo make install
    if ! [ $? -eq 0 ]; then
        echo "Failed to install orcania library!"
        cd -
        eval "rm -rf ${TMP_BUILD_DIR}"
        return 1
    fi
    cd -
    
    eval "cd ${ULFIUS_DIR}/lib/yder"
    make
    sudo make install
    if ! [ $? -eq 0 ]; then
        echo "Failed to install yder library!"
        cd -
        eval "rm -rf ${TMP_BUILD_DIR}"
        return 1
    fi
    cd -
    
    eval "cd ${ULFIUS_DIR}"
    make
    sudo make install
    if ! [ $? -eq 0 ]; then
        echo "Failed to install ulfius library!"
        cd -
        eval "rm -rf ${TMP_BUILD_DIR}"
        return 1
    fi
    cd -

    eval "rm -rf ${ULFIUS_DIR}"
}

echo "==> Updating package lists..."
update_repositories

echo "==> Updating submodules..."
update_submodules

echo "==> Installing submodules..."
install_submodules

echo "==> Installing building tools..."
install_build_tools

echo "==> Installing dependencies..."
install_dependencies

echo "==> Installing libjwt..."
install_libjwt

echo "==> Installing ulfius..."
install_ulfius_orcania_yder

eval "rm -r ${TMP_BUILD_DIR}"
