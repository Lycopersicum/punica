#!/bin/sh
#
# Punica - LwM2M server with REST API
# Copyright (C) 2018 8devices
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

set -e

PROJECT_ROOT_DIR="$(cd $(dirname "$0")/.. && pwd -P)"
THIRD_PARTY_DIR="${PROJECT_ROOT_DIR}/third_party"
BUILD_DIR="${PROJECT_ROOT_DIR}/build"
PREFIX_PATH_DIR="${BUILD_DIR}"

SCRIPT_NAME=$(basename -- "$0")
TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
# LOG_FILE="${PROJECT_ROOT_DIR}/${SCRIPT_NAME}_${TIMESTAMP}.log"
LOG_FILE="/dev/stdout"

BUILD_TOOLS_APT="git cmake build-essential automake libtool libgnutls28-dev texinfo"

JANSSON_DIR="${THIRD_PARTY_DIR}/jansson"
LIBJWT_DIR="${THIRD_PARTY_DIR}/libjwt"
LIBMICROHTTPD_DIR="${THIRD_PARTY_DIR}/libmicrohttpd"
ULFFIUS_DIR="${THIRD_PARTY_DIR}/ulfius"
WAKAAMA_DIR="${THIRD_PARTY_DIR}/wakaama"

AUTORECONF_ARGS_BASE="--prepend-include=${PREFIX_PATH_DIR} -i"
CONFIGURE_ARGS_BASE="--enable-silent-rules --disable-dependency-tracking --quiet --prefix ${PREFIX_PATH_DIR}"
CMAKE_ARGS_BASE="-DCMAKE_INSTALL_PREFIX:PATH=${PREFIX_PATH_DIR}"
MAKE_ARGS_BASE="--quiet"

echo_stderr () {
    echo "$@" >&2
}

library_error () {
    echo_stderr "Failed to install $1!"
    echo_stderr ""
    echo_stderr "For more information refer to \"${LOG_FILE}\""

    exit 1
}

update_repositories () {
    if which apt-get; then
        sudo apt-get update -qq
    elif which rpm; then
        echo_stderr "RPM is not supported yet!"
        return 1
    elif which opkg; then
        echo_stderr "OPKG is not supported yet!"
        return 1
    elif which brew; then
        echo_stderr "BREW is not supported yet!"
        return 1
    else
        echo_stderr "Unknown package manager! (not supported yet)"
        return 1
    fi

    return 0
}

update_submodules () {
    eval "cd ${PROJECT_ROOT_DIR}"

    git submodule update --init --recursive --quiet ||
    (
        echo_stderr "Failed to update submodules!"
        return 1
    )

    cd -
}

install_submodules () {
    install_libjansson
    install_libmicrohttpd
    install_libjwt
    install_ulfius
    install_wakaama
}

install_build_tools () {
    if which apt-get; then
        eval "sudo apt-get install -yqq ${BUILD_TOOLS_APT}"
    elif which rpm; then
        echo_stderr "RPM is not supported yet!"
        return 1
    elif which opkg; then
        echo_stderr "OPKG is not supported yet!"
        return 1
    elif which brew; then
        echo_stderr "BREW is not supported yet!"
        return 1
    else
        echo_stderr "Unknown package manager! (not supported yet)"
        return 1
    fi

    return $?
}

install_wakaama () {
    echo "    - Installing wakaama..."

    {
        eval "${WAKAAMA_DIR}/script/setup ${CMAKE_ARGS_BASE}" &&
        eval "cd ${WAKAAMA_DIR}/build" &&
        eval "make install ${MAKE_ARGS_BASE}" &&
        cd -
    } >> ${LOG_FILE} 2>&1 || {
        library_error "wakaama"
        return 1
    }
}

install_nettle () {
    configure_args="${CONFIGURE_ARGS_BASE} --disable-openssl"

    echo "    - Installing nettle..."

    eval "cd ${JANSSON_DIR}"

    {
        eval "autoreconf ${AUTORECONF_ARGS_BASE}" &&
        eval "./configure ${configure_args}" &&
        eval "make clean ${MAKE_ARGS_BASE}" &&
        eval "make ${MAKE_ARGS_BASE}" &&
        eval "make install ${MAKE_ARGS_BASE}" &&
        cd -
    } >> ${LOG_FILE} 2>&1 || {
        library_error "nettle"
        return 1
    }
}

install_libjansson () {
    echo "    - Installing libjansson..."

    eval "cd ${JANSSON_DIR}"

    {
        eval "autoreconf ${AUTORECONF_ARGS_BASE}" &&
        eval "./configure ${CONFIGURE_ARGS_BASE}" &&
        eval "make clean ${MAKE_ARGS_BASE}" &&
        eval "make ${MAKE_ARGS_BASE}" &&
        eval "make install ${MAKE_ARGS_BASE}" &&
        cd -
    } >> ${LOG_FILE} 2>&1 || {
        library_error "libjansson"
        return 1
    }
}

install_libjwt () {
    configure_args="${CONFIGURE_ARGS_BASE} --disable-doxygen-doc --without-openssl"

    echo "    - Installing libjwt..."

    eval "cd ${LIBJWT_DIR}"

    {
        eval "autoreconf ${AUTORECONF_ARGS_BASE}" &&
        eval "./configure ${configure_args}" &&
        eval "make clean ${MAKE_ARGS_BASE}" &&
        eval "make all ${MAKE_ARGS_BASE}" &&
        eval "make install ${MAKE_ARGS_BASE}" &&
        cd -
    } >> ${LOG_FILE} 2>&1 || {
        library_error "libjwt"
        return 1
    }
}

install_libmicrohttpd () {
    configure_args="${CONFIGURE_ARGS_BASE} --disable-curl"

    echo "    - Installing libmicrohttpd..."

    eval "cd ${LIBMICROHTTPD_DIR}"

    {
        eval "autoreconf ${AUTORECONF_ARGS_BASE}" &&
        eval "./configure ${configure_args}" &&
        eval "make clean ${MAKE_ARGS_BASE}" &&
        eval "make ${MAKE_ARGS_BASE}" &&
        eval "make install ${MAKE_ARGS_BASE}" &&
        cd -
    } >> ${LOG_FILE} 2>&1 || {
        library_error "libmicrohttpd"
        return 1
    }
}

install_ulfius () {
    cmake_args="${CMAKE_ARGS_BASE}  -DWITH_YDER=off -DBUILD_UWSC=off"

    echo "    - Installing ulfius..."

    eval "rm -rf ${ULFFIUS_DIR}/build"
    eval "mkdir ${ULFFIUS_DIR}/build"
    eval "cd ${ULFFIUS_DIR}/build"

    {
        eval "cmake ../ ${cmake_args}" &&
        eval "make ${MAKE_ARGS_BASE}" &&
        eval "make clean ${MAKE_ARGS_BASE}" &&
        eval "make install ${MAKE_ARGS_BASE}" &&
        cd -
    } >> ${LOG_FILE} 2>&1 || {
        library_error "ulfius"
        return 1
    }
}

eval "rm -rf ${BUILD_DIR}"
eval "mkdir ${BUILD_DIR}"

sudo -v

echo "==> Updating package lists..."
update_repositories >> ${LOG_FILE}

echo "==> Installing building tools..."
install_build_tools >> ${LOG_FILE}

echo "==> Updating submodules..."
update_submodules >> ${LOG_FILE}

echo "==> Installing submodules..."
install_submodules

echo "Finished bootstrapping!"
